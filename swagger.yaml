openapi: 3.0.0
info:
  title: Cravio API Documentation
  version: 1.0.0
  description: API documentation for Cravio backend
  contact:
    name: API Support
    email: support@yourdomain.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.yourdomain.com
    description: Production server

tags:
  - name: Restaurants
    description: Restaurant management operations
  - name: Merchants
    description: Merchant operations
  - name: Authentication
    description: User authentication operations
  - name: Orders
    description: Order management operations
  - name: Menu
    description: Menu item operations

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: |
        Register a new user with different roles (customer/merchant).
        Merchants require additional business information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request (missing fields or email exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate a user
      description: Login with email and password to receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags: [Authentication]
      summary: Get user profile
      description: Get authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /restaurant/restaurants/nearby:
    get:
      tags: [Restaurants]
      summary: Get nearby restaurants
      description: Get restaurants within 5km radius of provided coordinates
      parameters:
        - name: longitude
          in: query
          required: true
          schema:
            type: number
            format: float
            example: -73.935242
        - name: latitude
          in: query
          required: true
          schema:
            type: number
            format: float
            example: 40.730610
      responses:
        '200':
          description: List of nearby restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        '400':
          description: Missing longitude or latitude
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /restaurant/restaurants/{restaurantId}/menu:
    get:
      tags: [Restaurants, Menu]
      summary: Get restaurant menu
      description: Get restaurant details with menu items grouped by categories
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Restaurant and menu data
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurant:
                    $ref: '#/components/schemas/Restaurant'
                  menu:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          type: string
                          example: Appetizers
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/MenuItem'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /restaurant/orders:
    post:
      tags: [Orders]
      summary: Place an order
      description: Place an order with multiple items from a restaurant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - restaurantId
                - items
              properties:
                restaurantId:
                  type: string
                  example: 507f1f77bcf86cd799439011
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - menuItemId
                      - quantity
                    properties:
                      menuItemId:
                        type: string
                        example: 507f1f77bcf86cd799439012
                      quantity:
                        type: integer
                        minimum: 1
                        example: 2
                      specialInstructions:
                        type: string
                        example: No onions please
                specialInstructions:
                  type: string
                  example: Please deliver to back door
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order placed successfully
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /merchant/orders:
    get:
      tags: [Merchants, Orders]
      summary: Get merchant orders
      description: Get all orders for logged-in merchant with optional status filtering
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, accepted, preparing, ready, completed, rejected]
            example: pending
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /merchant/orders/{orderId}/status:
    put:
      tags: [Merchants, Orders]
      summary: Update order status
      description: Update the status of an order with validation
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439013
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [accepted, preparing, ready, completed, rejected]
                  example: accepted
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order status updated to accepted
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value or transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized to update this order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /merchant/restaurants:
    post:
      tags: [Merchants, Restaurants]
      summary: Create restaurant
      description: Create a new restaurant for the merchant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantCreateRequest'
      responses:
        '201':
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /merchant/menu-items:
    post:
      tags: [Merchants, Menu]
      summary: Create menu item
      description: Create a new menu item for a merchant's restaurant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemCreateRequest'
      responses:
        '201':
          description: Menu item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized to add items to this restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /merchant/menu-items/{stallId}:
    get:
      tags: [Merchants, Menu]
      summary: Get menu items
      description: Get all menu items for a specific restaurant
      security:
        - bearerAuth: []
      parameters:
        - name: stallId
          in: path
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: List of menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        '403':
          description: Not authorized to view this restaurant's menu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /merchant/menu-items/{itemId}:
    put:
      tags: [Merchants, Menu]
      summary: Update menu item
      description: Update an existing menu item
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439012
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemUpdateRequest'
      responses:
        '200':
          description: Menu item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized to update this item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Menu item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 6
          example: "securePassword123"
        role:
          type: string
          enum: [customer, merchant]
          example: merchant
        name:
          type: string
          example: John Doe
        phone:
          type: string
          example: "+1234567890"
        businessName:
          type: string
          example: "Awesome Business Inc."
        businessRegistration:
          type: string
          example: "12345-ABCDE"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: "securePassword123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        email:
          type: string
          example: user@example.com
        role:
          type: string
          enum: [customer, merchant]
          example: merchant
        profile:
          type: object
          properties:
            name:
              type: string
              example: John Doe
            phone:
              type: string
              example: "+1234567890"
        merchantDetails:
          type: object
          properties:
            businessName:
              type: string
              example: "Awesome Business Inc."
            businessRegistration:
              type: string
              example: "12345-ABCDE"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Registration failed"
        details:
          type: string
          example: "Business name is required for merchants"

    Restaurant:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Tasty Bites"
        description:
          type: string
          example: "Serving delicious food since 1999"
        location:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
              default: Point
            coordinates:
              type: array
              items:
                type: number
              example: [-73.935242, 40.730610]
        address:
          type: string
          example: "123 Main St, New York, NY 10001"
        openingHours:
          type: object
          properties:
            monday:
              type: string
              example: "9:00 AM - 10:00 PM"
            tuesday:
              type: string
              example: "9:00 AM - 10:00 PM"
            wednesday:
              type: string
              example: "9:00 AM - 10:00 PM"
            thursday:
              type: string
              example: "9:00 AM - 10:00 PM"
            friday:
              type: string
              example: "9:00 AM - 11:00 PM"
            saturday:
              type: string
              example: "10:00 AM - 11:00 PM"
            sunday:
              type: string
              example: "10:00 AM - 9:00 PM"
        isActive:
          type: boolean
          default: true

    RestaurantCreateRequest:
      type: object
      required:
        - name
        - location
        - address
      properties:
        name:
          type: string
          example: "Tasty Bites"
        description:
          type: string
          example: "Serving delicious food since 1999"
        location:
          type: object
          required:
            - coordinates
          properties:
            type:
              type: string
              enum: [Point]
              default: Point
            coordinates:
              type: array
              items:
                type: number
              minItems: 2
              maxItems: 2
              example: [-73.935242, 40.730610]
        address:
          type: string
          example: "123 Main St, New York, NY 10001"
        openingHours:
          type: object
          properties:
            monday:
              type: string
              example: "9:00 AM - 10:00 PM"
            tuesday:
              type: string
              example: "9:00 AM - 10:00 PM"
            wednesday:
              type: string
              example: "9:00 AM - 10:00 PM"
            thursday:
              type: string
              example: "9:00 AM - 10:00 PM"
            friday:
              type: string
              example: "9:00 AM - 11:00 PM"
            saturday:
              type: string
              example: "10:00 AM - 11:00 PM"
            sunday:
              type: string
              example: "10:00 AM - 9:00 PM"

    MenuItem:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439012"
        name:
          type: string
          example: "Margherita Pizza"
        description:
          type: string
          example: "Classic pizza with tomato sauce, mozzarella, and basil"
        price:
          type: number
          format: float
          minimum: 0
          example: 12.99
        category:
          type: string
          example: "Main Course"
        preparationTime:
          type: integer
          description: Preparation time in minutes
          minimum: 0
          example: 20
        dietaryTags:
          type: array
          items:
            type: string
          example: ["vegetarian"]
        isAvailable:
          type: boolean
          default: true
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/pizza.jpg"

    MenuItemCreateRequest:
      type: object
      required:
        - name
        - price
        - stallId
        - category
      properties:
        name:
          type: string
          example: "Margherita Pizza"
        price:
          type: number
          format: float
          minimum: 0
          example: 12.99
        stallId:
          type: string
          example: "507f1f77bcf86cd799439011"
        category:
          type: string
          example: "Main Course"
        description:
          type: string
          example: "Classic pizza with tomato sauce, mozzarella, and basil"
        preparationTime:
          type: integer
          description: Preparation time in minutes
          minimum: 0
          example: 20
        dietaryTags:
          type: array
          items:
            type: string
          example: ["vegetarian"]
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/pizza.jpg"

    MenuItemUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "Margherita Pizza"
        price:
          type: number
          format: float
          minimum: 0
          example: 12.99
        category:
          type: string
          example: "Main Course"
        description:
          type: string
          example: "Classic pizza with tomato sauce, mozzarella, and basil"
        preparationTime:
          type: integer
          description: Preparation time in minutes
          minimum: 0
          example: 20
        dietaryTags:
          type: array
          items:
            type: string
          example: ["vegetarian"]
        isAvailable:
          type: boolean
          example: true
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/pizza.jpg"

    Order:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439013"
        customer:
          type: string
          example: "507f1f77bcf86cd799439014"
        stall:
          type: object
          properties:
            _id:
              type: string
              example: "507f1f77bcf86cd799439011"
            name:
              type: string
              example: "Tasty Bites"
            openingHours:
              type: object
              properties:
                monday:
                  type: string
                  example: "9:00 AM - 10:00 PM"
        merchant:
          type: string
          example: "507f1f77bcf86cd799439015"
        items:
          type: array
          items:
            type: object
            properties:
              menuItem:
                type: object
                properties:
                  _id:
                    type: string
                    example: "507f1f77bcf86cd799439012"
                  name:
                    type: string
                    example: "Margherita Pizza"
                  price:
                    type: number
                    example: 12.99
                  category:
                    type: string
                    example: "Main Course"
                  preparationTime:
                    type: integer
                    example: 20
              quantity:
                type: integer
                minimum: 1
                example: 2
              specialInstructions:
                type: string
                example: "No onions please"
        status:
          type: string
          enum: [pending, accepted, preparing, ready, completed, rejected]
          example: pending
        estimatedWaitTime:
          type: integer
          description: Estimated wait time in minutes
          example: 30
        specialInstructions:
          type: string
          example: "Please deliver to back door"
        totalPrice:
          type: number
          format: float
          minimum: 0
          example: 25.98
        acceptedAt:
          type: string
          format: date-time
          example: "2023-01-01T12:30:00Z"
        completedAt:
          type: string
          format: date-time
          example: "2023-01-01T13:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:15:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-01T12:30:00Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use the JWT token received after login